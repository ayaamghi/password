package edu.guilford;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;


/*
 * Password class that generates a password based on the requirements
 * specified by the user. The requirements include the length of the password,
 * whether the password needs to contain an uppercase letter, a lowercase letter,
 * a number, and a special character. The password is generated by randomly selecting
 * characters from a pool of characters that meet the requirements. 
 * If no specific requirements are given, program defaults to a password of length 8 with all requirements true
 */
public class Password {
    
    private String password;
    private int length;

    private boolean needsUpperCase;
    private boolean needsLowerCase;
    private boolean needsNumber;
    private boolean needsSpecialCharacter;

    Random random = new Random();


    // Constructor
    public Password(int length, boolean needsUpperCase, boolean needsLowerCase, boolean needsNumber, boolean needsSpecialCharacter) {
        this.length = length;
        this.needsUpperCase = needsUpperCase;
        this.needsLowerCase = needsLowerCase;
        this.needsNumber = needsNumber;
        this.needsSpecialCharacter = needsSpecialCharacter;
        generatePassword();
    }

    //default constructor
    public Password() {
        this(8, true, true, true, true);
        generatePassword();
    }



//generated with o1
public void generatePassword() {
    String upperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    String lowerCase = "abcdefghijklmnopqrstuvwxyz";
    String numbers = "0123456789";
    String specialCharacters = "!@#$%^&*()_+";
    
    StringBuilder pool = new StringBuilder();
    if (needsUpperCase) pool.append(upperCase);
    if (needsLowerCase) pool.append(lowerCase);
    if (needsNumber) pool.append(numbers);
    if (needsSpecialCharacter) pool.append(specialCharacters);

    if (pool.length() == 0) {
        // Fallback if no requirements are selected
        pool.append(lowerCase);
    }

    List<Character> passwordChars = new ArrayList<>();
    
    if (needsUpperCase) {
        passwordChars.add(upperCase.charAt(random.nextInt(upperCase.length())));
    }
    if (needsLowerCase) {
        passwordChars.add(lowerCase.charAt(random.nextInt(lowerCase.length())));
    }
    if (needsNumber) {
        passwordChars.add(numbers.charAt(random.nextInt(numbers.length())));
    }
    if (needsSpecialCharacter) {
        passwordChars.add(specialCharacters.charAt(random.nextInt(specialCharacters.length())));
    }

    while (passwordChars.size() < length) {
        passwordChars.add(pool.charAt(random.nextInt(pool.length())));
    }

    Collections.shuffle(passwordChars);

    StringBuilder sb = new StringBuilder();
    for (char c : passwordChars) {
        sb.append(c);
    }

    password = sb.toString();
}   




    // Getters and Setters
    public String getPassword() {
        return password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    
    public int getLength() {
        return length;
    }
    
    public void setLength(int length) {
        this.length = length;
    }
    
    public boolean isNeedsUpperCase() {
        return needsUpperCase;
    }
    
    public void setNeedsUpperCase(boolean needsUpperCase) {
        this.needsUpperCase = needsUpperCase;
    }
    
    public boolean isNeedsLowerCase() {
        return needsLowerCase;
    }
    
    public void setNeedsLowerCase(boolean needsLowerCase) {
        this.needsLowerCase = needsLowerCase;
    }
    
    public boolean isNeedsNumber() {
        return needsNumber;
    }
    
    public void setNeedsNumber(boolean needsNumber) {
        this.needsNumber = needsNumber;
    }
    
    public boolean isNeedsSpecialCharacter() {
        return needsSpecialCharacter;
    }
    
    public void setNeedsSpecialCharacter(boolean needsSpecialCharacter) {
        this.needsSpecialCharacter = needsSpecialCharacter;
    }

    @Override
    public String toString() {
        return "Password{" +
                "password='" + password + '\'' +
                ", length=" + length +
                ", needsUpperCase=" + needsUpperCase +
                ", needsLowerCase=" + needsLowerCase +
                ", needsNumber=" + needsNumber +
                ", needsSpecialCharacter=" + needsSpecialCharacter +
                '}';
    }
}
